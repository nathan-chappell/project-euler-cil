.assembly extern mscorlib {}
.assembly X {}

.method public static bool IsPalindrome(int32 val)
{
    .maxstack 16
    .locals init (int32 i, int32 len, class System.String sval)

    ldc.i4.0
    stloc i

    ldarga val
    call instance string [mscorlib]System.Int32::ToString()
    dup
    stloc sval
    // dup
    // call void [mscorlib]System.Console::WriteLine(class System.String)
    call instance int32 [mscorlib]System.String::get_Length()
    stloc len
    // ldloc len
    // call void [mscorlib]System.Console::WriteLine(int32)

    LOOP_PALINDROME:
        br INDEX_TEST
        DEBUG:
            // #region debug
            ldstr "ind: ({0},{2}), val: ({1},{3})"

            ldc.i4.4
            newarr object

            dup
            ldc.i4.0
                ldloc i
                box int32
            stelem.ref

            dup
            ldc.i4.1
                ldloc sval
                ldloc i
                call instance char [mscorlib]System.String::get_Chars(int32)
                box char
            stelem.ref

            dup
            ldc.i4.2
                ldloc len
                ldloc i
                sub
                ldc.i4.1
                sub
                box int32
            stelem.ref

            dup
            ldc.i4.3
                ldloc sval
                ldloc len
                ldloc i
                sub
                ldc.i4.1
                sub
                call instance char [mscorlib]System.String::get_Chars(int32)
                box char
            stelem.ref

            call string [mscorlib]System.String::Format(string, object[])
            call void [mscorlib]System.Console::WriteLine(class System.String)
            // #endregion
        INDEX_TEST:
            ldloc i
            ldloc len
            ldloc i
            sub
            ldc.i4.1
            sub
            bge SUCCESS

        CHAR_TEST:
            ldloc sval
            ldloc i
            // ldc.i4 0
            callvirt instance char [mscorlib]System.String::get_Chars(int32)

            ldloc sval
            ldloc len
            ldloc i
            sub
            ldc.i4.1
            sub
            callvirt instance char [mscorlib]System.String::get_Chars(int32)

            bne.un FAIL

        LOOP_PALINDROME_INC:
            ldloc i
            ldc.i4.1
            add
            stloc i
            br LOOP_PALINDROME

    FAIL:
    ldc.i4.0
    ret

    SUCCESS:
    ldc.i4.1
    ret
}

.data minI = int32(100)
.data maxI = int32(1000)
.field public static int32 MinI at minI
.field public static int32 MaxI at maxI

.method public static int32 TestLoop()
{
    .maxstack 20
    .locals init (int32 i, int32 j, int32 maxPalindrome)
    ldsfld int32 MinI
    stloc i

    LOOP_I:
        ldsfld int32 MinI
        stloc j
        LOOP_J:
            ldloc i
            ldloc j
            mul
            dup // | i*j, i*j
            call bool IsPalindrome(int32)

            brfalse CONTINUE_J_POP
            dup
            ldloc maxPalindrome
            ble CONTINUE_J_POP
            stloc maxPalindrome
            br CONTINUE_J
            
            CONTINUE_J_POP:
            pop
        CONTINUE_J:
        ldc.i4.1
        ldloc j
        add
        stloc j
        ldloc j
        ldsfld int32 MaxI
        blt LOOP_J

    CONTINUE_I:
    ldc.i4.1
    ldloc i
    add
    stloc i
    ldloc i
    ldsfld int32 MaxI
    blt LOOP_I

    ldloc maxPalindrome
    ret
}

.method public static void Main()
{
    .entrypoint
    .maxstack 5
    .locals init (uint64 maxprime, uint64 i, bool[] primes, uint64 n, uint64 val)

    ldstr "Hello."
    call void [mscorlib]System.Console::WriteLine(class System.String)

    // ldc.i4 128767821
    // call bool IsPalindrome(int32)
    // call class System.String [mscorlib]System.Convert::ToString(bool)
    // call void [mscorlib]System.Console::WriteLine(class System.String)
    call int32 TestLoop()
    call void [mscorlib]System.Console::WriteLine(int32)
    ret
}
