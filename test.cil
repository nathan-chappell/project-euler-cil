.assembly extern mscorlib {}
.assembly extern PalindromeTester {}
.assembly X {}

.data minI = int32(100)
.data maxI = int32(1000)
.field public static int32 MinI at minI
.field public static int32 MaxI at maxI

.method public static int32 TestLoop()
{
    .maxstack 20
    .locals init (int32 i, int32 j, int32 maxPalindrome)
    ldsfld int32 MinI
    stloc i

    LOOP_I:
        ldsfld int32 MinI
        stloc j
        LOOP_J:
            ldloc i
            ldloc j
            mul
            dup // | i*j, i*j
            call bool [PalindromeTester]PalindromeTester::IsPalindrome(int32)

            brfalse CONTINUE_J_POP
            dup
            ldloc maxPalindrome
            ble CONTINUE_J_POP
            stloc maxPalindrome
            br CONTINUE_J
            
            CONTINUE_J_POP:
            pop
        CONTINUE_J:
        ldc.i4.1
        ldloc j
        add
        stloc j
        ldloc j
        ldsfld int32 MaxI
        blt LOOP_J

    CONTINUE_I:
    ldc.i4.1
    ldloc i
    add
    stloc i
    ldloc i
    ldsfld int32 MaxI
    blt LOOP_I

    ldloc maxPalindrome
    ret
}

.method public static void Main()
{
    .entrypoint
    .maxstack 5
    .locals init (uint64 maxprime, uint64 i, bool[] primes, uint64 n, uint64 val)

    ldstr "Hello."
    call void [mscorlib]System.Console::WriteLine(class System.String)

    // ldc.i4 128767821
    // call bool IsPalindrome(int32)
    // call class System.String [mscorlib]System.Convert::ToString(bool)
    // call void [mscorlib]System.Console::WriteLine(class System.String)
    call int32 TestLoop()
    call void [mscorlib]System.Console::WriteLine(int32)
    ret
}
