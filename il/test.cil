.assembly extern mscorlib {}
.assembly test {}

.data minI = int32(100)
.data maxI = int32(1000)
.field public static int32 MinI at minI
.field public static int32 MaxI at maxI

.class public FNode<U>
{
    .field public !U Val
    .field public class FNode<!U> Next

    .method public instance void .ctor(!U val)
    {
        .maxstack 3
        ldarg.0
        ldnull
        stfld class FNode<!U> class FNode<!U>::Next

        ldarg.0
        ldarg.1
        stfld !U class FNode<!U>::Val

        ret
    }

    .method public instance string ToString()
    {
        .maxstack 3
        ldarg.0
        ldfld !U class FNode<!U>::Val
        box !U
        callvirt instance string [mscorlib]System.Object::ToString()
        ret
    }
}

.class public FList<T>
{

    .field public class FNode<!0> Head
    .field public class FNode<!0> Tail
    .field public int32 Count

    .method public instance void .ctor()
    {
        .maxstack 5
        ldarg.0
        ldnull
        stfld class FNode<!0> class FList<!0>::Head

        ldarg.0
        ldnull
        stfld class FNode<!0> class FList<!0>::Tail

        ldarg.0
        ldc.i4.0
        stfld int32 class FList<!0>::Count

        ret
    }

    .method public instance bool IsEmpty()
    {
        .maxstack 5

        ldarg.0
        ldfld class FNode<!0> class FList<!0>::Head
        ldnull
        beq EMPTY

        NOT_EMPTY:
        ldc.i4.1
        ret

        EMPTY:
        ldc.i4.1
        ret
    }

    .method private instance void StartList(class FNode<!0> newNode)
    {
        // ldarg newNode
        // dup
        // stfld class FNode<!0> class FNode<!0>::Next

        ldarg.0
        ldarg newNode
        stfld class FNode<!0> class FList<!0>::Tail

        ldarg.0
        ldarg newNode
        stfld class FNode<!0> class FList<!0>::Head

        ldarg.0
        ldc.i4.1
        stfld int32 class FList<!0>::Count

        ret
    }

    .method public instance class FList<!0> Add(!0 val)
    {
        .maxstack 8
        .locals init (class FNode<!0> newNode)

        ldarg val
        newobj instance void class FNode<!0>::.ctor(!0)
        stloc newNode

        ldarg.0
        ldfld class FNode<!0> class FList<!0>::Tail
        ldnull
        beq START_LIST

        APPEND:

        ldarg.0
        ldfld class FNode<!0> class FList<!0>::Tail
        ldloc newNode
        stfld class FNode<!0> class FNode<!0>::Next
        ldarg.0
        ldloc newNode
        stfld class FNode<!0> class FList<!0>::Tail

        ldarg.0
        dup
        ldfld int32 class FList<!0>::Count
        ldc.i4.1
        add
        stfld int32 class FList<!0>::Count

        br END

        START_LIST:
        ldstr "START_LIST"
        call void [mscorlib]System.Console::WriteLine(string)

        ldarg.0
        ldloc newNode
        call instance void class FList<!0>::StartList(class FNode<!0>)

        END:
        ldarg.0
        ret
    }

    .method private static string GetItemsString(class FNode<!0> curNode)
    {
        .maxstack 8
        .locals init (string result)
        ldstr "("
        stloc result

        LOOP:
            ldarg curNode
            brfalse END

            ldloc result
            ldstr "{0}, "
            ldarg curNode
            ldfld !0 class FNode<!0>::Val
            box !0
            call string [mscorlib]System.String::Format(string, object)
            // callvirt instance string [mscorlib]System.Object::ToString()
            call string [mscorlib]System.String::Concat(string, string)
            stloc result

            ldarg curNode
            ldfld class FNode<!0> class FNode<!0>::Next
            starg curNode
            br LOOP

        END:
        ldloc result
        ldstr ")"
        call string [mscorlib]System.String::Concat(string, string)
        ret
    }

    .method public instance string ToString()
    {
        .maxstack 4
        .locals init (string typeName, string items, string template)
        ldstr "List<{0}>[{1}]"
        stloc template

        // typename
        ldtoken !0
        call class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
        callvirt instance string [mscorlib]System.Type::get_Name()
        stloc typeName

        // items
        ldarg.0
        ldfld class FNode<!0> class FList<!0>::Head
        call string class FList<!0>::GetItemsString(class FNode<!0>)
        stloc items

        ldloc template
        ldloc typeName
        ldloc items
        call string [mscorlib]System.String::Format(string, object, object)
        ret
    }
}

.class public PowerLTMapper
{
    .field int32 Max
    .method public instance void .ctor(int32 max)
    {
        .maxstack 3
        ldarg.0
        ldarg max
        stfld int32 class PowerLTMapper::Max
        ret
    }

    .method public instance int32 Map(int32 val, int32 i)
    {
       .locals (int32 cur)
       .maxstack 8

       ldstr "<PowerLTMapper; Max={0}, val={1}>"
       ldarg.0
       ldfld int32 class PowerLTMapper::Max
       box int32
       ldarg val
       box int32
       call string [mscorlib]System.String::Format(string, object, object)
       call void [mscorlib]System.Console::WriteLine(string)

       ldarg val
       stloc cur

       LOOP:
           ldstr "{0} mapped to: {1}"
           ldarg val
           box int32
           ldloc cur
           box int32
           call string [mscorlib]System.String::Format(string, object, object)
           call void [mscorlib]System.Console::WriteLine(string)

           ldloc cur
           ldarg val
           mul
           dup

           ldarg.0
           ldfld int32 PowerLTMapper::Max
           bge DONE
           stloc cur

           br LOOP


        DONE:
        pop
        ldloc cur
        ret
    }
}

.method public static class FList<int32> Int32Map(class FList<int32> list, class [mscorlib]System.Func`3<int32,int32,int32> mapper)
{
    .locals (class FList<int32> result, class FNode<int32> curNode, int32 i)
    newobj instance void class FList<int32>::.ctor()
    stloc result

    ldstr "Int32Map"
    call void [mscorlib]System.Console::WriteLine(string)

    ldarg list
    ldfld class FNode<!0> class FList<int32>::Head
    stloc curNode
    ldloc curNode
    ldnull
    ceq
    call void [mscorlib]System.Console::WriteLine(bool)

    LOOP:
        ldloc curNode
        ldnull
        beq DONE

        ldloc result
        ldarg mapper
        ldloc curNode
        ldfld !0 class FNode<int32>::Val
        ldloc i
        // call instance int32 Int32Mapper::Invoke(int32)
        callvirt instance !2 class [mscorlib]System.Func`3<int32,int32,int32>::Invoke(!0, !1)
        call instance class FList<!0> class FList<int32>::Add(!0)
        // pop
        call instance string class FList<int32>::ToString()
        call void [mscorlib]System.Console::WriteLine(class System.String)

        ldloc i
        ldc.i4.1
        add
        stloc i

        ldloc curNode
        ldfld class FNode<!0> class FNode<int32>::Next
        stloc curNode
        br LOOP

    DONE:
        ldloc result
        ret
}

.method public static void Main()
{
    .entrypoint
    .maxstack 12
    .locals init (class FList<int32> list)

    ldstr "Hello."
    call void [mscorlib]System.Console::WriteLine(class System.String)
    newobj instance void class FList<int32>::.ctor()
    stloc list
    ldloc list
    call instance bool class FList<int32>::IsEmpty()
    call void [mscorlib]System.Console::WriteLine(bool)

    ldloc list
    ldc.i4.2
    call instance class FList<!0> class FList<int32>::Add(!0)
    ldc.i4.3
    call instance class FList<!0> class FList<int32>::Add(!0)
    ldc.i4.5
    call instance class FList<!0> class FList<int32>::Add(!0)
    ldfld int32 class FList<int32>::Count
    call void [mscorlib]System.Console::WriteLine(int32)

    ldloc list
    ldfld class FNode<!0> class FList<int32>::Head
    call instance string class FNode<int32>::ToString()
    call void [mscorlib]System.Console::WriteLine(object)

    ldloc list
    ldc.i4 20
    newobj instance void class PowerLTMapper::.ctor(int32)
    ldftn instance int32 class PowerLTMapper::Map(int32, int32)
    // call instance void class Int32Mapper::.ctor(object, native int)
    newobj instance void class [mscorlib]System.Func`3<int32,int32,int32>::.ctor(object, native int)
    call class FList<int32> Int32Map(class FList<int32>, class [mscorlib]System.Func`3<int32,int32,int32>)

    call instance string class FList<int32>::ToString()
    call void [mscorlib]System.Console::WriteLine(string)

    ret
}
