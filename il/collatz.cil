.assembly extern mscorlib {}
.assembly collatz {}

.class public interface abstract IValueChanged
{
    .event class [mscorlib]System.EventHandler`1<int32> ValueChanged
    {
        .addon instance void IValueChanged::add_ValueChanged(class [mscorlib]System.EventHandler`1<int32>)
        .removeon instance void IValueChanged::remove_ValueChanged(class [mscorlib]System.EventHandler`1<int32>)
        .fire instance void IValueChanged::fire_ValueChanged(object, int32)
    }
    .method public abstract virtual instance void add_ValueChanged(class [mscorlib]System.EventHandler`1<int32>) {}
    .method public abstract virtual instance void remove_ValueChanged(class [mscorlib]System.EventHandler`1<int32>) {}
    .method public abstract virtual instance void fire_ValueChanged(object, int32) {}
}

.method public static void ConnectValueChangedEvents(class IValueChanged l, class IValueChanged r)
{
    // l.fire causes r to fire
    ldarg l
    ldarg r
    dup
    ldvirtftn instance void class IValueChanged::fire_ValueChanged(object, int32)
    newobj instance void class [mscorlib]System.EventHandler`1<int32>::.ctor(object, native int)
    callvirt instance void class IValueChanged::add_ValueChanged(class [mscorlib]System.EventHandler`1<int32>)
    ret
}

.class public abstract BaseCompGraphNode implements IValueChanged
{
    .field family class [mscorlib]System.EventHandler`1<int32> valueChangedEventHandler
    .method public virtual instance void add_ValueChanged(class [mscorlib]System.EventHandler`1<int32> nextHandler) 
    {
        .override method instance void class IValueChanged::add_ValueChanged(class [mscorlib]System.EventHandler`1<int32>)
        ldarg.0
        dup
        ldfld class [mscorlib]System.EventHandler`1<int32> BaseCompGraphNode::valueChangedEventHandler
        ldarg nextHandler
        call class [mscorlib]System.Delegate class [mscorlib]System.Delegate::Combine(
                class [mscorlib]System.Delegate,
                class [mscorlib]System.Delegate)
        castclass class [mscorlib]System.EventHandler`1<int32>
        stfld class [mscorlib]System.EventHandler`1<int32> BaseCompGraphNode::valueChangedEventHandler
        ret
    }
    .method public virtual instance void remove_ValueChanged(class [mscorlib]System.EventHandler`1<int32> nextHandler) 
    {
        .override method instance void class IValueChanged::remove_ValueChanged(class [mscorlib]System.EventHandler`1<int32>)
        ldarg.0
        dup
        ldfld class [mscorlib]System.EventHandler`1<int32> BaseCompGraphNode::valueChangedEventHandler
        ldarg nextHandler
        call class [mscorlib]System.Delegate class [mscorlib]System.Delegate::Remove(
                class [mscorlib]System.Delegate,
                class [mscorlib]System.Delegate)
        castclass class [mscorlib]System.EventHandler`1<int32>
        stfld class [mscorlib]System.EventHandler`1<int32> BaseCompGraphNode::valueChangedEventHandler
        ret
    }
}

.class public abstract BaseOpNode extends BaseCompGraphNode
{
    .method family virtual abstract int32 Execute(int32) {}
    .method public virtual instance void fire_ValueChanged(object sender, int32 val) 
    {
        // this.valueChangedEventHandler.Invoke(this.Execute(val))
        .override method instance void class IValueChanged::fire_ValueChanged(object, int32)
        ldarg.0
        ldfld class [mscorlib]System.EventHandler`1<int32> BaseCompGraphNode::valueChangedEventHandler
        ldarg.0
        dup
        ldarg val
        callvirt instance int32 BaseOpNode::Execute(int32)
        callvirt instance void class [mscorlib]System.EventHandler`1<int32>::Invoke(object, !0)
        ret
    }
}

.class public UnOpNode extends BaseOpNode
{
    .field private class [mscorlib]System.Func`2<int32,int32> op

    .method public instance void .ctor(class [mscorlib]System.Func`2<int32,int32> op)
    {
        ldarg.0
        ldarg op
        stfld class [mscorlib]System.Func`2<int32,int32> UnOpNode::op
        ret
    }
    .method family virtual instance int32 Execute(int32 val)
    {
        ldarg.0
        ldfld class [mscorlib]System.Func`2<int32,int32> UnOpNode::op
        ldarg val
        callvirt instance !1 class [mscorlib]System.Func`2<int32,int32>::Invoke(!0)
        ret
    }
    .method public instance void OnValueChangedHandler(object o, int32 val)
    {
        ldarg.0
        ldarg val
        callvirt instance void BaseOpNode::fire_ValueChanged(object, int32)
        ret
    }
}

.class public DecisionNode extends BaseCompGraphNode
{
    .field private class [mscorlib]System.Func`2<int32,bool> pred
    .field private class BaseCompGraphNode ifNode
    .field private class BaseCompGraphNode elseNode

    .method public instance void .ctor(
            class [mscorlib]System.Func`2<int32,bool> pred,
            class BaseCompGraphNode ifNode,
            class BaseCompGraphNode elseNode)
    {
        ldarg.0
        ldarg pred
        stfld class [mscorlib]System.Func`2<int32,bool> DecisionNode::pred
        ldarg.0
        ldarg ifNode
        stfld class BaseCompGraphNode DecisionNode::ifNode
        ldarg.0
        ldarg elseNode
        stfld class BaseCompGraphNode DecisionNode::elseNode
        ret
    }
    .method public virtual instance void fire_ValueChanged(object sender, int32 val)
    {
        .override method instance void class IValueChanged::fire_ValueChanged(object, int32)
        .locals (class BaseCompGraphNode nextNode)
        ldarg.0
        ldfld class [mscorlib]System.EventHandler`1<int32> class BaseCompGraphNode::valueChangedEventHandler
        dup
        brfalse AFTER_EVENT_POP
        ldarg sender
        ldarg val
        callvirt instance void class [mscorlib]System.EventHandler`1<int32>::Invoke(object, !0)
        br AFTER_EVENT

        AFTER_EVENT_POP:
        pop

        AFTER_EVENT:
        ldarg.0
        ldfld class [mscorlib]System.Func`2<int32,bool> DecisionNode::pred
        ldarg val
        callvirt instance !1 class [mscorlib]System.Func`2<int32,bool>::Invoke(!0)
        brtrue TRUE_PATH

        FALSE_PATH:
            ldarg.0
            ldfld class BaseCompGraphNode DecisionNode::elseNode
            stloc nextNode
            br CALL_NEXT

        TRUE_PATH:
            ldarg.0
            ldfld class BaseCompGraphNode DecisionNode::ifNode
            stloc nextNode
            br CALL_NEXT

        CALL_NEXT:
            ldloc nextNode
            brtrue NOT_NULL
            ret

            NOT_NULL:
            ldloc nextNode
            ldnull
            ldarg val
            callvirt instance void IValueChanged::fire_ValueChanged(object, int32)
            ret

        
        ret
    }
}

// collatz sequence:
// f(n) =
//      n/2    : n even
//      3n + 1 : n odd


.class public CollatzMethods
{
    .method public static int32 DivideByTwo(int32 val)
    {
        ldarg val
        ldc.i4.1
        shr
        ret
    }
    .method public static int32 MultiplyByThree(int32 val)
    {
        ldarg val
        dup
        ldc.i4.1
        shl
        add
        ret
    }
    .method public static int32 AddOne(int32 val)
    {
        ldarg val
        ldc.i4.1
        add
        ret
    }
    .method public static bool IsEven(int32 val)
    {
        ldarg val
        ldc.i4.2
        rem
        brfalse EVEN

        ODD:
        ldc.i4.0
        ret

        EVEN:
        ldc.i4.1
        ret
    }
    .method public static bool IsComplete(int32 val)
    {
        ldarg val
        ldc.i4.1
        ceq
        ret
    }
}

.class public CollatzSequence
{
    .field class UnOpNode DivideByTwoNode
    .field class UnOpNode MultiplyByThreeNode
    .field class UnOpNode AddOneNode

    .field public class DecisionNode IsEvenNode
    .field class DecisionNode IsCompleteNode

    .method private instance void initNodes()
    {
        .locals (
                class UnOpNode addNode,
                class UnOpNode mulNode,
                class UnOpNode divNode, 
                class DecisionNode isEvenNode,
                class DecisionNode isCompleteNode
                )

        ldarg.0
        ldnull
        ldftn int32 class CollatzMethods::DivideByTwo(int32)
        newobj instance void class [mscorlib]System.Func`2<int32, int32>::.ctor(object, native int)
        newobj instance void class UnOpNode::.ctor(class [mscorlib]System.Func`2<int32, int32>)
        dup
        stloc divNode
        stfld class UnOpNode class CollatzSequence::DivideByTwoNode


        ldarg.0
        ldnull
        ldftn int32 CollatzMethods::MultiplyByThree(int32)
        newobj instance void class [mscorlib]System.Func`2<int32, int32>::.ctor(object, native int)
        newobj instance void class UnOpNode::.ctor(class [mscorlib]System.Func`2<int32, int32>)
        dup
        stloc mulNode
        stfld class UnOpNode class CollatzSequence::MultiplyByThreeNode

        ldarg.0
        ldnull
        ldftn int32 CollatzMethods::AddOne(int32)
        newobj instance void class [mscorlib]System.Func`2<int32, int32>::.ctor(object, native int)
        newobj instance void class UnOpNode::.ctor(class [mscorlib]System.Func`2<int32, int32>)
        dup
        stloc addNode
        stfld class UnOpNode class CollatzSequence::AddOneNode

        ldarg.0
        ldnull
        ldftn bool CollatzMethods::IsEven(int32)
        newobj instance void class [mscorlib]System.Func`2<int32, bool>::.ctor(object, native int)
        ldloc divNode
        ldloc mulNode
        newobj instance void class DecisionNode::.ctor(
                class [mscorlib]System.Func`2<int32, bool>,
                class BaseCompGraphNode,
                class BaseCompGraphNode)
        dup
        stloc isEvenNode
        stfld class DecisionNode class CollatzSequence::IsEvenNode

        ldarg.0
        ldnull
        ldftn bool class CollatzMethods::IsComplete(int32)
        newobj instance void class [mscorlib]System.Func`2<int32,bool>::.ctor(object, native int)
        ldnull
        ldloc isEvenNode
        newobj instance void class DecisionNode::.ctor(
                class [mscorlib]System.Func`2<int32, bool>,
                class BaseCompGraphNode,
                class BaseCompGraphNode)
        dup
        stloc isCompleteNode
        stfld class DecisionNode class CollatzSequence::IsCompleteNode

        // Connect:
        // IsEvenNode* -> MultiplyByThreeNode
        // IsEvenNode* -> DivideByTwoNode
        // MultiplyByThreeNode -> AddOneNode
        // AddOneNode -> IsCompleteNode
        // DivideByTwoNode -> IsCompleteNode
        // IsCompleteNode -> IsEvenNode

        ldloc mulNode
        ldloc addNode
        call void ConnectValueChangedEvents(class IValueChanged, class IValueChanged)

        ldloc addNode
        ldloc isCompleteNode
        call void ConnectValueChangedEvents(class IValueChanged, class IValueChanged)

        ldloc divNode
        ldloc isCompleteNode
        call void ConnectValueChangedEvents(class IValueChanged, class IValueChanged)

        ret
    }

    .method public instance void .ctor()
    {
        ldarg.0
        call instance void CollatzSequence::initNodes()
        //
        ldarg.0
        ldfld class DecisionNode class CollatzSequence::IsCompleteNode
        //
        ldarg.0
        ldftn instance void class CollatzSequence::handle_OnIsComplete(object, int32)
        newobj instance void class [mscorlib]System.EventHandler`1<int32>::.ctor(object, native int)
        callvirt instance void class IValueChanged::add_ValueChanged(class [mscorlib]System.EventHandler`1<int32>)
        ret
    }

    .property int32 SequenceVal()
    {
        .set instance void CollatzSequence::set_SequenceVal(int32)
    }

    .method private instance void handle_OnIsComplete(object o, int32 val)
    {
        ldstr "[handle_OnIsComplete] val: {0}"
        ldarg val
        box int32
        call string [mscorlib]System.String::Format(string, object)
        call void [mscorlib]System.Console::WriteLine(string)
        ret
    }

    .method public instance void set_SequenceVal(int32 val)
    {
        ldstr "Setting SequenceVal: {0}"
        ldarg val
        box int32
        call string [mscorlib]System.String::Format(string, object)
        call void [mscorlib]System.Console::WriteLine(string)

        ldarg.0
        ldfld class DecisionNode CollatzSequence::IsCompleteNode
        // ldnull
        ldarg.0
        ldarg val
        callvirt instance void DecisionNode::fire_ValueChanged(object, int32)

        ret
    }
}

.method public static void Main()
{
    // .entrypoint
    .locals (class CollatzSequence s)

    ldstr "collatz2"
    call void [mscorlib]System.Console::WriteLine(string)

    newobj instance void CollatzSequence::.ctor()
    stloc s

    ldloc s
    ldc.i4 317
    call instance void class CollatzSequence::set_SequenceVal(int32)

    ret
}
